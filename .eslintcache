[{"D:\\pandora\\work\\mesoc-frontend\\src\\reportWebVitals.js":"1","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\UploadDocument.js":"2","D:\\pandora\\work\\mesoc-frontend\\src\\components\\analysisLoader.js":"3","D:\\pandora\\work\\mesoc-frontend\\src\\components\\heatmap.js":"4","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\Browse.js":"5","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\Analysis.js":"6","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SendFeedback.js":"7","D:\\pandora\\work\\mesoc-frontend\\src\\components\\sidenav.js":"8","D:\\pandora\\work\\mesoc-frontend\\src\\components\\map.js":"9","D:\\pandora\\work\\mesoc-frontend\\src\\index.js":"10","D:\\pandora\\work\\mesoc-frontend\\src\\App.js":"11","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\MyDocuments.js":"12","D:\\pandora\\work\\mesoc-frontend\\src\\components\\navbar.js":"13","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SignIn.js":"14","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SignUp.js":"15","D:\\pandora\\work\\mesoc-frontend\\src\\components\\infoModal.js":"16","D:\\pandora\\work\\mesoc-frontend\\src\\components\\navSearchField.js":"17","D:\\pandora\\work\\mesoc-frontend\\src\\components\\graph.js":"18","D:\\pandora\\work\\mesoc-frontend\\src\\components\\filePreview.js":"19","D:\\pandora\\work\\mesoc-frontend\\src\\components\\documentList.js":"20","D:\\pandora\\work\\mesoc-frontend\\src\\components\\fileDropzone.js":"21"},{"size":375,"mtime":1609797738002,"results":"22","hashOfConfig":"23"},{"size":6828,"mtime":1609797738002,"results":"24","hashOfConfig":"23"},{"size":318,"mtime":1609797737992,"results":"25","hashOfConfig":"23"},{"size":1566,"mtime":1609797737994,"results":"26","hashOfConfig":"23"},{"size":701,"mtime":1609799145385,"results":"27","hashOfConfig":"23"},{"size":6285,"mtime":1609797738000,"results":"28","hashOfConfig":"23"},{"size":3223,"mtime":1609797738001,"results":"29","hashOfConfig":"23"},{"size":4287,"mtime":1609797737995,"results":"30","hashOfConfig":"23"},{"size":1446,"mtime":1609858102588,"results":"31","hashOfConfig":"23"},{"size":590,"mtime":1609797737998,"results":"32","hashOfConfig":"23"},{"size":2158,"mtime":1609797737073,"results":"33","hashOfConfig":"23"},{"size":8895,"mtime":1609797738000,"results":"34","hashOfConfig":"23"},{"size":2622,"mtime":1609797737994,"results":"35","hashOfConfig":"23"},{"size":3447,"mtime":1609797738001,"results":"36","hashOfConfig":"23"},{"size":6457,"mtime":1609797738001,"results":"37","hashOfConfig":"23"},{"size":915,"mtime":1609797737994,"results":"38","hashOfConfig":"23"},{"size":463,"mtime":1609797737994,"results":"39","hashOfConfig":"23"},{"size":420,"mtime":1609797737993,"results":"40","hashOfConfig":"23"},{"size":309,"mtime":1609797737993,"results":"41","hashOfConfig":"23"},{"size":1827,"mtime":1609797737993,"results":"42","hashOfConfig":"23"},{"size":982,"mtime":1609797737993,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"g7v86d",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},"D:\\pandora\\work\\mesoc-frontend\\src\\reportWebVitals.js",[],["96","97"],"D:\\pandora\\work\\mesoc-frontend\\src\\pages\\UploadDocument.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\analysisLoader.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\heatmap.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\pages\\Browse.js",["98","99","100"],"import React from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Row, Col, Button } from \"reactstrap\";\r\n\r\nimport Sidenav from '../components/sidenav';\r\nimport Map from '../components/map';\r\n\r\nconst Browse = () => {\r\n  return(\r\n    <div className=\"pageWrapper\">\r\n      <div className=\"sidenavArea\">\r\n        <Sidenav />\r\n      </div>\r\n      <div className=\"pageArea\">\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle>MESOC world map</CardTitle>\r\n            <CardSubtitle className=\"mb-3\">Explore our MESOC data visualized on a world map.</CardSubtitle>\r\n            <Map />\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Browse;","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\Analysis.js",["101"],"import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Row, Col, Button } from \"reactstrap\";\r\n\r\nimport Sidenav from '../components/sidenav';\r\nimport Heatmap from '../components/heatmap';\r\nimport Graph from '../components/graph';\r\nimport AnalysisLoader from '../components/analysisLoader';\r\nimport DocumentList from '../components/documentList';\r\n\r\nlet options = null;\r\nlet series = null;\r\n\r\nconst Analysis = ({ match }) => {\r\n\r\n  const [cells, setCells] = useState(null);\r\n  const [selectedCell, setSelectedCell] = useState(null);\r\n  const [cellSim, setCellSim] = useState(null);\r\n  const [vars, setVars] = useState(null);\r\n  const [selectedVar, setSelectedVar] = useState(null);\r\n  const [varSim, setVarSim] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // TODO:\r\n    // Fetch cell data based on url params and set it to state\r\n    setTimeout(() => {\r\n      setCells(require('../testData/celije.json').cells);\r\n    }, 1000)\r\n    console.log(match.params.analysisType, match.params.analysisKey);\r\n  }, []);\r\n\r\n  const fetchGraph = (cell) => {\r\n    setVars(null);\r\n    setCellSim(null);\r\n    // If deselecting cell clear cell data.\r\n    if(selectedCell === cell) {\r\n      setSelectedCell(null);\r\n      return;\r\n    }\r\n\r\n    setSelectedCell(cell);\r\n    // TODO:\r\n    // Fetch variable data based on input (selected cell).\r\n    // Fetch similar by cell.\r\n    const varsTemp = require('../testData/varijable.json').vars;\r\n\r\n    let labels = [];\r\n    let percentages = [];\r\n    async function setData() {\r\n      await varsTemp.forEach(element => {\r\n        labels.push(element.name);\r\n        percentages.push(parseInt(element.strength * 100));\r\n      });\r\n\r\n      // Settings for graph rendering.\r\n      options = {\r\n        chart: {\r\n          id: 'mesoc-graph',\r\n          events: {\r\n            dataPointSelection: function(event, chartContext, config) {\r\n              setVarSim(null);\r\n              if(config.selectedDataPoints[0][0] !== config.dataPointIndex) {\r\n                setSelectedVar(null);\r\n                return;\r\n              }\r\n              setSelectedVar(config.dataPointIndex);\r\n              // TODO:\r\n              // Fetch similar by variable.\r\n              setTimeout(() => setVarSim(require('../testData/simm.json').similar), 1000);\r\n            }\r\n          }\r\n        },\r\n        xaxis: {\r\n          categories: labels,\r\n          labels: {\r\n            show: true,\r\n            formatter: val => {\r\n              if(val.length > 22) {\r\n                return `${val.slice(0, 20)}...`\r\n              }\r\n              return val;\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          labels: {\r\n            formatter: val => `${val} %`\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          formatter: val => `${val} %`,\r\n          offsetY: -20,\r\n          style: {\r\n            fontSize: '12px',\r\n            colors: [\"#303030\"]\r\n          }\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            dataLabels: {\r\n              position: 'top'\r\n            }\r\n          }\r\n        },\r\n        colors: ['#5A74AC']\r\n      };\r\n      series = [{\r\n        name: 'effect',\r\n        data: percentages\r\n      }];\r\n\r\n      setTimeout(() => {\r\n        setVars(varsTemp);\r\n        setCellSim(require('../testData/simm.json').similar);\r\n      }, 1000)\r\n    };\r\n\r\n    setData();\r\n  };\r\n\r\n  return(\r\n    <div className=\"pageWrapper\">\r\n      <div className=\"sidenavArea\">\r\n        <Sidenav />\r\n      </div>\r\n      <div className=\"pageArea\">\r\n        {/* TODO:\r\n        Create dynamic page header here to display document title or city. */}\r\n        <Row>\r\n          <Col lg=\"4\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>MESOC matrix</CardTitle>\r\n                <CardSubtitle className=\"mb-3\">Impact of variables per cell in a given document</CardSubtitle>\r\n                {cells ?\r\n                  <Heatmap\r\n                    data={cells}\r\n                    selectedCell={selectedCell}\r\n                    fetchGraph={fetchGraph}\r\n                  /> :\r\n                  <AnalysisLoader height='550px' />\r\n                }\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"8\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>MESOC Graph</CardTitle>\r\n                <CardSubtitle className=\"mb-3\">Distribution of variables impacting selected cell</CardSubtitle>\r\n                {selectedCell !== null ?\r\n                  <Graph vars={vars} options={options} series={series} /> :\r\n                  <div className=\"analysisEmpty\" style={{ height: '550px' }}>No cell selected</div>\r\n                }\r\n                {/* TODO:\r\n                Fetch data and display variable decomposition screen (as a modal) on click of this button. */}\r\n                <Button onClick={() => console.log(selectedVar)} color=\"secondary\" className=\"ml-3\" disabled={selectedVar === null}>See decomposition</Button>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col lg=\"6\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>Similar documents</CardTitle>\r\n                <CardSubtitle className=\"mb-3\">Document similarity by selected cell</CardSubtitle>\r\n                {selectedCell !== null ?\r\n                  <DocumentList docs={cellSim} /> :\r\n                  <div className=\"analysisEmpty\" style={{ height: '200px' }}>No cell selected</div>\r\n                }\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"6\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>Similar documents</CardTitle>\r\n                <CardSubtitle className=\"mb-3\">Document similarity by selected variable</CardSubtitle>\r\n                {selectedVar !== null ?\r\n                  <DocumentList docs={varSim} /> :\r\n                  <div className=\"analysisEmpty\" style={{ height: '200px' }}>No variable selected</div>\r\n                }\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Analysis);","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SendFeedback.js",["102"],"import React, { useState } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Alert, Input } from \"reactstrap\";\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nimport Sidenav from '../components/sidenav';\r\n\r\nconst SendFeedback = ({ userToken, history }) => {\r\n\r\n  const [textAreaBadge, setTextAreaBadge] = useState(false);\r\n  const [textCount, setTextCount] = useState(0);\r\n\r\n  const [succ, setSucc] = useState(false);\r\n  const [danger, setDanger] = useState(false);\r\n  const [wait, setWait] = useState(false);\r\n\r\n  const handleSubmit = e => {\r\n    const eventTarget = e.target;\r\n    e.preventDefault();\r\n\r\n    setWait(true);\r\n    // TODO:\r\n    // Submit data to backend.\r\n    setTimeout(() => {\r\n      setSucc(true);\r\n      setWait(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const textareachange = e => {\r\n    var count = e.target.value.length;\r\n    \r\n\t\tif(count > 0) {\r\n      setTextAreaBadge(true);\r\n\t\t} else {\r\n      setTextAreaBadge(false);\r\n    }\r\n\r\n\t\tsetTextCount(e.target.value.length);\r\n\t};\r\n\r\n  // If not authenticated, redirect to sign in.\r\n  if(userToken === null) {\r\n    return <Redirect to=\"/sign-in\" />\r\n  }\r\n\r\n  return(\r\n    <div className=\"pageWrapper\">\r\n      <div className=\"sidenavArea\">\r\n        <Sidenav />\r\n      </div>\r\n      <div className=\"pageArea\">\r\n        {succ &&\r\n          <SweetAlert\r\n            title=\"Success.\"\r\n            success\r\n            confirmBtnBsStyle=\"btn btn-primary wawes-effect waves-light\"\r\n            onConfirm={() => {history.push('/my-documents')}}\r\n          >\r\n            Thank you for your feedback!\r\n          </SweetAlert>\r\n        }\r\n        {danger &&\r\n          <SweetAlert\r\n            title=\"Oops!\"\r\n            danger\r\n            onConfirm={() => { setDanger(false) }}\r\n          >\r\n            Something went wrong.\r\n          </SweetAlert>\r\n        }\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle>Send feedback</CardTitle>\r\n            <CardSubtitle className=\"mb-3\">Help us improve MESOC toolkit application.</CardSubtitle>\r\n\r\n            {wait && <Alert color=\"secondary\">Please wait.</Alert>}\r\n\r\n            <form className=\"uplForm\" onSubmit={handleSubmit}>\r\n              <input type=\"text\" name=\"subject\" placeholder=\"Subject\" className=\"form-control mb-2\" required />\r\n              <Input\r\n                type=\"textarea\"\r\n                id=\"textarea\"\r\n                onChange={(e) => { textareachange(e) }}\r\n                maxLength=\"1200\"\r\n                rows=\"10\"\r\n                placeholder=\"Message body\"\r\n                name=\"messageBody\"\r\n                required\r\n              />\r\n              {textAreaBadge ? (\r\n                <span className=\"badgecount badge badge-success\">\r\n                  {\" \"}\r\n                  {textCount} / 1200{\" \"}\r\n                </span>\r\n              ) : null}\r\n              \r\n              <div className=\"mt-3 btnFix\">\r\n                <button className=\"btn btn-primary btn-block wawes-effect waves-light\" type=\"submit\">Submit</button>\r\n              </div>\r\n            </form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(SendFeedback);","D:\\pandora\\work\\mesoc-frontend\\src\\components\\sidenav.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\map.js",["103","104","105"],"D:\\pandora\\work\\mesoc-frontend\\src\\index.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\App.js",["106"],"import React, { useEffect, useState } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport './assets/scss/theme.scss';\r\nimport './myScss/myMain.scss';\r\n\r\nimport Navbar from './components/navbar';\r\nimport Browse from './pages/Browse';\r\nimport MyDocuments from './pages/MyDocuments';\r\nimport SendFeedback from './pages/SendFeedback';\r\nimport SignIn from './pages/SignIn';\r\nimport SignUp from './pages/SignUp';\r\nimport UploadDocument from './pages/UploadDocument';\r\nimport Analysis from './pages/Analysis';\r\nimport AnalysisLoader from './components/analysisLoader';\r\n\r\n\r\nfunction App() {\r\n\r\n  // TODO:\r\n  // Display cookie warning.\r\n\r\n  const [authCookie, setAuthCookie, removeAuthCookie] = useCookies(null);\r\n  const [userToken, setUserToken] = useState(null);\r\n  const [appReady, setAppReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    authCookie.mesoc_local_user !== undefined && setUserToken(authCookie.mesoc_local_user);\r\n    setAppReady(true);\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {appReady ? \r\n        <div className=\"App\">\r\n        <Route path='/'>\r\n          <Navbar userToken={userToken} setUserToken={setUserToken} removeAuthCookie={removeAuthCookie}/>\r\n        </Route>\r\n        <Switch>\r\n          <Route path='/browse'>\r\n            <Browse />\r\n          </Route>\r\n          <Route path='/my-documents'>\r\n            <MyDocuments userToken={userToken} />\r\n          </Route>\r\n          <Route path='/send-feedback'>\r\n            <SendFeedback userToken={userToken} />\r\n          </Route>\r\n          <Route path='/sign-in'>\r\n            <SignIn setUserToken={setUserToken} setAuthCookie={setAuthCookie} />\r\n          </Route>\r\n          <Route path='/create-account'>\r\n            <SignUp />\r\n          </Route>\r\n          <Route path='/upload-document'>\r\n            <UploadDocument userToken={userToken} />\r\n          </Route>\r\n          <Route path='/:analysisType/:analysisKey'>\r\n            <Analysis />\r\n          </Route>\r\n        </Switch>\r\n      </div> :\r\n      <AnalysisLoader height={'100vh'} />}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\MyDocuments.js",["107"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, withRouter, Redirect } from 'react-router-dom';\r\nimport { Table, Card, CardBody, CardTitle, CardSubtitle, Nav, NavItem, NavLink, TabContent, TabPane } from \"reactstrap\";\r\nimport classnames from 'classnames';\r\n\r\nimport Sidenav from '../components/sidenav';\r\nimport InfoModal from '../components/infoModal';\r\nimport AnalysisLoader from '../components/analysisLoader';\r\n\r\nconst MyDocuments = ({ userToken }) => {\r\n\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [infoModalOpen, setInfoModalOpen] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [modalText, setModalText] = useState(null);\r\n  const [docsData, setDocsData] = useState(null);\r\n  const [docIndex, setDocIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if(userToken === null) {\r\n      return;\r\n    }\r\n\r\n    // TODO:\r\n    // Fetch documents data here and put that data into state\r\n    setTimeout(() => {\r\n      setDocsData([\r\n        {\r\n          id: 'doc1',\r\n          title: 'Text About Wine',\r\n          uploaded: '21/12/2021',\r\n          language: 'English',\r\n          location: 'Milano, Italy',\r\n          status: 'finished'\r\n        },\r\n        {\r\n          id: 'doc12',\r\n          title: 'Text about something really important',\r\n          uploaded: '21/12/2021',\r\n          language: 'English',\r\n          location: 'Milano, Italy',\r\n          status: 'processing'\r\n        },\r\n        {\r\n          id: 'doc123',\r\n          title: 'Example',\r\n          uploaded: '21/12/2021',\r\n          language: 'English',\r\n          location: 'Milano, Italy',\r\n          status: 'failed',\r\n          info: 'For your document we produced no results.'\r\n        }\r\n      ])\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // First argument: if in \"Active documents\" -> 'reject'\r\n  //                 if in \"Deleted documents\" -> 'inform'\r\n  // Second argument: index of rendered document\r\n  const openModal = (type, selected) => {\r\n    setDocIndex(selected);\r\n    setModalType(type);\r\n    setModalText(docsData[selected].info);\r\n    setInfoModalOpen(true);\r\n  };\r\n\r\n  const switchTab = index => {\r\n    setDocsData(null);\r\n    setActiveTab(index);\r\n    if(index === '1') {\r\n      setTimeout(() => {\r\n        setDocsData([\r\n          {\r\n            id: 'doc1',\r\n            title: 'Text About Wine',\r\n            uploaded: '21/12/2021',\r\n            language: 'English',\r\n            location: 'Milano, Italy',\r\n            status: 'finished'\r\n          },\r\n          {\r\n            id: 'doc12',\r\n            title: 'Text about something really important',\r\n            uploaded: '21/12/2021',\r\n            language: 'English',\r\n            location: 'Milano, Italy',\r\n            status: 'processing'\r\n          },\r\n          {\r\n            id: 'doc123',\r\n            title: 'Example',\r\n            uploaded: '21/12/2021',\r\n            language: 'English',\r\n            location: 'Milano, Italy',\r\n            status: 'failed',\r\n            info: 'For your document we produced no results.'\r\n          }\r\n        ]);\r\n      }, 1000);\r\n    } else {\r\n      setTimeout(() => {\r\n        setDocsData([\r\n          {\r\n            id: 'doc1234',\r\n            title: 'Text About Wine',\r\n            uploaded: '21/12/2021',\r\n            language: 'English',\r\n            location: 'Milano, Italy',\r\n            status: 'failed',\r\n            info: 'For your document we produced no results.'\r\n          }\r\n        ])\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  // If not authenticated, redirect to sign in.\r\n  if(userToken === null) {\r\n    return <Redirect to=\"/sign-in\" />\r\n  }\r\n\r\n  return(\r\n    <div className=\"pageWrapper\">\r\n      <div className=\"sidenavArea\">\r\n        <Sidenav />\r\n      </div>\r\n      <div className=\"pageArea\">\r\n\r\n        <InfoModal type={modalType} text={modalText} modalOpen={infoModalOpen} setModalOpen={setInfoModalOpen} docIndex={docIndex} />\r\n\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle>My documents</CardTitle>\r\n            <CardSubtitle className=\"mb-3\">Here you can find all of your documents you have uploaded over time.</CardSubtitle>\r\n\r\n            <Nav tabs className=\"nav-tabs-custom hideOnMobile\">\r\n              <NavItem>\r\n                <NavLink\r\n                  style={{ cursor: \"pointer\" }}\r\n                  className={classnames({\r\n                    active: activeTab === '1'\r\n                  })}\r\n                  onClick={() => switchTab('1')}\r\n                >\r\n                  <span className=\"d-none d-sm-block\">Active</span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  style={{ cursor: \"pointer\" }}\r\n                  className={classnames({\r\n                    active: activeTab === '2'\r\n                  })}\r\n                  onClick={() => switchTab('2')}\r\n                >\r\n                  <span className=\"d-none d-sm-block\">Failed</span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n\r\n            <button onClick={() => {activeTab === '1' ? switchTab('2') : switchTab('1')}} className=\"groupSwitch hideOnDesktop\">Switch to active</button>\r\n\r\n            {/* TODO:\r\n            Fetch and display tables from backend server.\r\n            Create view for \"you haven't uploaded any documents\" and \"you haven't deleted any documents\" */}\r\n\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                {docsData !== null ?\r\n                  <div className=\"table-responsive\">\r\n                    <Table className=\"table mb-0\">\r\n                      <thead className=\"thead-light\">\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>Title</th>\r\n                          <th>Uploaded</th>\r\n                          <th>Language</th>\r\n                          <th>Location</th>\r\n                          <th></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {docsData.map((doc, index) => {\r\n                          return <tr key={doc.id}>\r\n                            <th scope=\"row\">{index + 1}</th>\r\n                            <td>{doc.title}</td>\r\n                            <td>{doc.uploaded}</td>\r\n                            <td>{doc.language}</td>\r\n                            <td>{doc.location}</td>\r\n                            <td>\r\n                              {doc.status === 'finished' ?\r\n                                <Link to={`document/${doc.id}`} className=\"btn btn-primary wawes-effect waves-light\">Open</Link> :\r\n                                doc.status === 'processing' ?\r\n                                  <button className=\"btn btn-primary wawes-effect waves-light\" disabled>Processing</button> :\r\n                                  <button onClick={() => openModal('reject', index)} className=\"btn btn-danger wawes-effect waves-light\">Failed</button>\r\n                              }\r\n                            </td>\r\n                          </tr>\r\n                        })}\r\n                      </tbody>\r\n                    </Table>\r\n                  </div> :\r\n                  <AnalysisLoader height=\"200px\" />\r\n                }\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                {docsData !== null ?\r\n                  <div className=\"table-responsive\">\r\n                    <Table className=\"table mb-0\">\r\n                      <thead className=\"thead-light\">\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>Title</th>\r\n                          <th>Uploaded</th>\r\n                          <th>Language</th>\r\n                          <th>Location</th>\r\n                          <th></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {docsData.map((doc, index) => {\r\n                          return <tr key={doc.id}>\r\n                            <th scope=\"row\">{index + 1}</th>\r\n                            <td>{doc.title}</td>\r\n                            <td>{doc.uploaded}</td>\r\n                            <td>{doc.language}</td>\r\n                            <td>{doc.location}</td>\r\n                            <td>\r\n                              <button onClick={() => openModal('inform', index)} className=\"btn btn-info wawes-effect waves-light\">Info</button>\r\n                            </td>\r\n                          </tr>\r\n                        })}\r\n                      </tbody>\r\n                    </Table>\r\n                  </div> :\r\n                  <AnalysisLoader height=\"200px\" />\r\n                }\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(MyDocuments);","D:\\pandora\\work\\mesoc-frontend\\src\\components\\navbar.js",["108","109"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\n\r\nimport NavSearchField from './navSearchField';\r\n\r\nimport logo from '../images/mesocLogoBlue.png';\r\n// import searchIco from '../assets/images/search.svg';\r\nimport { ReactComponent as SearchIcon } from '../assets/images/search.svg'\r\nimport { Nav } from 'reactstrap';\r\n\r\nconst Navbar = ({ userToken, setUserToken, removeAuthCookie }) => {\r\n\r\n  const [navOpen, setNavOpen] = useState(false);\r\n\r\n  const signOut = () => {\r\n    setUserToken(null);\r\n    removeAuthCookie('mesoc_local_user');\r\n    setNavOpen(false);\r\n  };\r\n\r\n  return(\r\n    <nav>\r\n      <a href=\"http://localhost:4001\" className=\"logoA\">\r\n        <img src={logo} alt=\"logo of mesoc toolkit application\" className=\"logo\"/>\r\n      </a>\r\n\r\n      <NavSearchField />\r\n\r\n      <Link to=\"browse\" className=\"mainA\">Browse</Link>\r\n      {userToken === null && <Link to=\"sign-in\" className=\"secondaryA\">Sign in</Link>}\r\n      {userToken === null ?\r\n        <Link to=\"create-account\" className=\"secondaryA\">Create account</Link> :\r\n        <Link to=\"/browse\" onClick={signOut} className=\"secondaryA\">Sign out</Link>\r\n      }\r\n\r\n      {/* Mobile */}\r\n      <div onClick={() => setNavOpen(!navOpen)} className=\"hamburgerApk\">\r\n        <span className={classnames({ burgerLinesApk: true, hamOpen: navOpen })}></span>\r\n      </div>\r\n      <div className={classnames({ mobileNavList: true, mobileNavLOpen: navOpen })}>\r\n        <NavSearchField display=\"block\" margin=\".5em auto\" width=\"200px\" />\r\n        {userToken === null ?\r\n          <div className=\"accountDiv\">\r\n            <Link onClick={() => setNavOpen(!navOpen)} to=\"/sign-in\" className=\"secondaryAPhone\">Sign in</Link>\r\n            <span>or</span>\r\n            <Link onClick={() => setNavOpen(!navOpen)} to=\"/create-account\" className=\"secondaryAPhone\">Create account</Link>\r\n          </div> : \r\n          <Link onClick={signOut} to=\"/browse\" className=\"secondaryAPhone\" style={{ margin: '1.4em auto', display: 'block', width: '83px' }}>Sign out</Link>\r\n        }\r\n        <Link onClick={() => setNavOpen(!navOpen)} to=\"/browse\" className=\"mobileSideLink\">Browse</Link>\r\n        <Link onClick={() => setNavOpen(!navOpen)} to=\"/my-documents\" className=\"mobileSideLink\">My documents</Link>\r\n        <Link onClick={() => setNavOpen(!navOpen)} to=\"/upload-document\" className=\"mobileSideLink\">Upload document</Link>\r\n        <Link onClick={() => setNavOpen(!navOpen)} to=\"/send-feedback\" className=\"mobileSideLink\">Send-feedback</Link>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;","D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SignIn.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\pages\\SignUp.js",["110","111","112","113"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, CardBody, Card, Alert, Container, Label } from \"reactstrap\";\r\nimport { AvForm, AvField, AvInput, AvGroup } from 'availity-reactstrap-validation';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport axios from 'axios';\r\n\r\nimport logo from '../images/mesocLogoBlue.png';\r\n\r\nconst SignUp = props => {\r\n\r\n  const [err, setErr] = useState(null);\r\n  const [succ, setSucc] = useState(false);\r\n  const [wait, setWait] = useState(false);\r\n  const [danger, setDanger] = useState(false);\r\n  const [capCheck, setCapCheck] = useState(false);\r\n\r\n  const handleValidSubmit = e => {\r\n    // TODO:\r\n    // Add all password validations (see api documentation).\r\n    if(e.target.password.value !== e.target.repeatPassword.value) {\r\n      setErr('Passwords don\\'t match. Please try again.');\r\n      return;\r\n    }\r\n    if(!capCheck) {\r\n      setErr('Please confirm that you are not a robot.');\r\n      return;\r\n    }\r\n\r\n    // TODO:\r\n    // Send data to backend. Display message acordingly to backend response\r\n    setWait(true);\r\n    // axios\r\n    //   .post('http://localhost:7000/users/', {\r\n    //     email: e.target.email.value,\r\n    //     password: e.target.password.value\r\n    //   }, {\r\n    //     headers: {\r\n    //       \"Content-Type\": \"application/json\",\r\n    //       \"Access-Control-Allow-Origin\": \"*\"\r\n    //     }\r\n    //   })\r\n    //   .then(response => {\r\n    //     console.log(response);\r\n    //     setWait(false);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.log(error);\r\n    //     setWait(false);\r\n    //   });\r\n\r\n    setTimeout(() => {\r\n      setWait(false);\r\n      //setDanger(true);\r\n      setSucc(true);\r\n    }, 1500);\r\n  };\r\n\r\n  return(\r\n    <div className=\"signInWrapper\">\r\n      {succ &&\r\n        <SweetAlert\r\n          title=\"A verification link has been sent to your email account.\"\r\n          success\r\n          confirmBtnBsStyle=\"btn btn-primary wawes-effect waves-light\"\r\n          onConfirm={() => {props.history.push('/browse')}}\r\n        >\r\n          Please click on the link that has just been sent to your email account to verify your email and continue the registration process. Be sure to check your spam folder.\r\n        </SweetAlert>\r\n      }\r\n      {danger &&\r\n        <SweetAlert\r\n          title=\"Oops!\"\r\n          danger\r\n          onConfirm={() => {setDanger(false)}}\r\n        >\r\n          Something went wrong.\r\n        </SweetAlert>\r\n      }\r\n      <div className=\"account-pages my-5 pt-sm-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={5} lg={6} xl={5}>\r\n              <Card className=\"overflow-hidden\">\r\n                <div className=\"bg-soft-primary\">\r\n                  <Row>\r\n                    <Col className=\"col-7\">\r\n                      <div className=\"text-primary p-4\">\r\n                        <h5 className=\"text-primary\">Welcome!</h5>\r\n                        <p>Create your MESOC account.</p>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n                <CardBody className=\"pt-0\">\r\n                <div>\r\n                  <Link to=\"/browse\">\r\n                    <div className=\"avatar-md profile-user-wid mb-4\">\r\n                      <span className=\"avatar-title rounded-circle bg-light\">\r\n                        <img src={logo} alt=\"\" className=\"rounded-circle\" height=\"34\" />\r\n                      </span>\r\n                    </div>\r\n                  </Link>\r\n                  <div className=\"p-2\">\r\n                    <AvForm className=\"form-horizontal\" onValidSubmit={e => handleValidSubmit(e)}>\r\n\r\n                      {err && <Alert color=\"danger\">{err}</Alert>}\r\n                      {wait && <Alert color=\"secondary\">Please wait.</Alert>}\r\n\r\n                      <div className=\"form-group\">\r\n                        <AvField onInput={() => setErr(null)} name=\"email\" label=\"Email\" className=\"form-control\" type=\"email\" required />\r\n                      </div>\r\n\r\n                      <div className=\"form-group\">\r\n                        <AvField onInput={() => setErr(null)} name=\"password\" label=\"Password\" className=\"form-control\" type=\"password\" required />\r\n                      </div>\r\n\r\n                      <div className=\"form-group\">\r\n                        <AvField onInput={() => setErr(null)} name=\"repeatPassword\" label=\"Repeat password\" className=\"form-control\" type=\"password\" required />\r\n                      </div>\r\n\r\n                      {/* TODO:\r\n                      Link these to actual Terms & Tonditions and Privacy policy */}\r\n                      <AvGroup check>\r\n                        <Label  className=\"mb-4\" check>\r\n                          <AvInput type=\"checkbox\" name=\"agree\" required />\r\n                          <span className=\"fs95\">By checking this box, you are acknowledging that you have read, understood, and accept our <a href=\"#\" target=\"_blank\" className=\"font-weight-medium text-primary fs95\">Terms & Conditions</a> and <a href=\"#\" target=\"_blank\" className=\"font-weight-medium text-primary fs95\">Privacy Policy</a>, and that you consent to our use of your personal data as described in our <a href=\"#\" target=\"_blank\" className=\"font-weight-medium text-primary fs95\">Privacy Policy</a>. Also you grant us the permission to process, analyze and store uploaded documents.</span>\r\n                        </Label>\r\n                      </AvGroup>\r\n\r\n                      {/* TODO:\r\n                      Add official mesoc recaptcha here */}\r\n                      <ReCAPTCHA\r\n                        sitekey=\"6LcMGQ8aAAAAANsNdayJ6eaZx0q-U8wz3v-4pBBS\"\r\n                        onChange={() => setCapCheck(true)}\r\n                        onErrored={() => setCapCheck(false)}\r\n                        onExpired={() => setCapCheck(false)}\r\n                      />\r\n\r\n                      <div className=\"mt-3\">\r\n                        <button className=\"btn btn-primary btn-block wawes-effect waves-light\" type=\"submit\">Create account</button>\r\n                      </div>\r\n\r\n                    </AvForm>\r\n                  </div>\r\n                </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;","D:\\pandora\\work\\mesoc-frontend\\src\\components\\infoModal.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\navSearchField.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\graph.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\filePreview.js",[],"D:\\pandora\\work\\mesoc-frontend\\src\\components\\documentList.js",["114"],"import React from 'react';\r\n\r\nimport AnalysisLoader from './analysisLoader';\r\n\r\nconst DocumentList = ({ docs }) => {\r\n  return(\r\n    <React.Fragment>\r\n      {docs ?\r\n        <div className=\"dlContainer\">\r\n          {/* TODO:\r\n          Add a unique key prop (use document id). */}\r\n          {docs.map(doc => {\r\n            return <a href=\"#\" target=\"_blank\" className=\"docContainer\">\r\n              <svg className=\"docIcon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m23.589 22.261-2.102-2.101c.51-.769.814-1.713.814-2.728 0-2.389-1.683-4.385-3.929-4.866l-.033-.006v-4.043c0-.009 0-.018 0-.026 0-.246-.088-.471-.233-.646l.001.002v-.005c-.019-.023-.039-.045-.06-.066l-.008-.009c-.009-.009-.018-.018-.027-.027l-7.44-7.44c-.021-.021-.042-.04-.065-.059l-.026-.018c-.016-.013-.033-.026-.05-.038l-.025-.018c-.018-.012-.036-.022-.054-.034l-.023-.012q-.034-.02-.075-.037l-.032-.013-.051-.018-.036-.011-.058-.015-.028-.006c-.028-.006-.057-.01-.086-.013h-8.948c-.559.002-1.011.454-1.015 1.012v20.377c0 .561.454 1.017 1.015 1.019h16.306.004c1.013 0 1.955-.304 2.74-.827l-.018.011 2.102 2.102c.181.166.423.268.689.268.563 0 1.019-.456 1.019-1.019 0-.266-.102-.508-.269-.689l.001.001zm-3.325-4.827c0 1.625-1.318 2.943-2.943 2.943s-2.943-1.318-2.943-2.943 1.318-2.943 2.943-2.943c1.624.002 2.941 1.318 2.943 2.942zm-9.396-13.956 3.993 3.994h-3.993zm-8.83-1.44h6.793v6.453c0 .563.456 1.019 1.019 1.019h6.453v3.05c-2.278.487-3.962 2.483-3.962 4.873 0 1.109.362 2.133.975 2.96l-.01-.013h-11.269z\"/></svg>\r\n              <h5 className=\"docTitle\">{doc.title}</h5>\r\n              <span className=\"docPercentage\">{`${parseInt(doc.similarity * 100)}%`}</span>\r\n            </a>\r\n          })}\r\n        </div> :\r\n        <AnalysisLoader height='200px' />\r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DocumentList;","D:\\pandora\\work\\mesoc-frontend\\src\\components\\fileDropzone.js",["115"],"import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nconst FileDropzone = ({ setFile, setInvalid }) => {\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setInvalid(null);\r\n    if(acceptedFiles.length === 0) {\r\n      setInvalid('Only .pdf and .txt files are supported.');\r\n      return;\r\n    }\r\n    if(acceptedFiles.length > 1) {\r\n      setInvalid('Please upload only one document.');\r\n      return;\r\n    }\r\n    setFile(acceptedFiles);\r\n    console.log(acceptedFiles);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop, accept: '.pdf, .txt'});\r\n\r\n  return(\r\n    <div className=\"dropArea\" {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        isDragActive ?\r\n          <p className=\"dtActive\">Drop here!</p> :\r\n          <p className=\"dtPassive\">Drag and drop your document or click to open file explorer.</p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileDropzone;",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":51,"nodeType":"122","messageId":"123","endLine":2,"endColumn":54},{"ruleId":"120","severity":1,"message":"124","line":2,"column":56,"nodeType":"122","messageId":"123","endLine":2,"endColumn":59},{"ruleId":"120","severity":1,"message":"125","line":2,"column":61,"nodeType":"122","messageId":"123","endLine":2,"endColumn":67},{"ruleId":"126","severity":1,"message":"127","line":30,"column":6,"nodeType":"128","endLine":30,"endColumn":8,"suggestions":"129"},{"ruleId":"120","severity":1,"message":"130","line":18,"column":11,"nodeType":"122","messageId":"123","endLine":18,"endColumn":22},{"ruleId":"120","severity":1,"message":"131","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"120","severity":1,"message":"132","line":20,"column":11,"nodeType":"122","messageId":"123","endLine":20,"endColumn":13},{"ruleId":"120","severity":1,"message":"133","line":35,"column":11,"nodeType":"122","messageId":"123","endLine":35,"endColumn":14},{"ruleId":"126","severity":1,"message":"134","line":31,"column":6,"nodeType":"128","endLine":31,"endColumn":8,"suggestions":"135"},{"ruleId":"126","severity":1,"message":"136","line":55,"column":6,"nodeType":"128","endLine":55,"endColumn":8,"suggestions":"137"},{"ruleId":"120","severity":1,"message":"138","line":9,"column":28,"nodeType":"122","messageId":"123","endLine":9,"endColumn":38},{"ruleId":"120","severity":1,"message":"139","line":10,"column":10,"nodeType":"122","messageId":"123","endLine":10,"endColumn":13},{"ruleId":"120","severity":1,"message":"140","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":128,"column":141,"nodeType":"143","endLine":128,"endColumn":218},{"ruleId":"141","severity":1,"message":"142","line":128,"column":245,"nodeType":"143","endLine":128,"endColumn":322},{"ruleId":"141","severity":1,"message":"142","line":128,"column":416,"nodeType":"143","endLine":128,"endColumn":493},{"ruleId":"141","severity":1,"message":"142","line":13,"column":20,"nodeType":"143","endLine":13,"endColumn":73},{"ruleId":"126","severity":1,"message":"144","line":18,"column":6,"nodeType":"128","endLine":18,"endColumn":8,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'match.params.analysisKey' and 'match.params.analysisType'. Either include them or remove the dependency array.","ArrayExpression",["148"],"'eventTarget' is assigned a value but never used.","'useState' is defined but never used.","'gl' is assigned a value but never used.","'mrk' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'authCookie.mesoc_local_user'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'userToken'. Either include it or remove the dependency array.",["150"],"'SearchIcon' is defined but never used.","'Nav' is defined but never used.","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useCallback has missing dependencies: 'setFile' and 'setInvalid'. Either include them or remove the dependency array. If 'setInvalid' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [match.params.analysisKey, match.params.analysisType]",{"range":"160","text":"161"},"Update the dependencies array to be: [authCookie.mesoc_local_user]",{"range":"162","text":"163"},"Update the dependencies array to be: [userToken]",{"range":"164","text":"165"},"Update the dependencies array to be: [setFile, setInvalid]",{"range":"166","text":"167"},[1098,1100],"[match.params.analysisKey, match.params.analysisType]",[1023,1025],"[authCookie.mesoc_local_user]",[1764,1766],"[userToken]",[523,525],"[setFile, setInvalid]"]